// <auto-generated />
using System;
using ComplianceMan.Data.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComplianceMan.Data.Migrations
{
    [DbContext(typeof(ComplianceManDbContext))]
    [Migration("20230703113605_Permission in role")]
    partial class Permissioninrole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ComplianceMan.Data.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dev Ops"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Q&A"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeveloper")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 2,
                            FirstName = "Ahmed",
                            IsDeveloper = false,
                            LastName = "Zamil"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 5,
                            FirstName = "Marielina",
                            IsDeveloper = true,
                            LastName = "Fardous"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 5,
                            FirstName = "Rihan",
                            IsDeveloper = true,
                            LastName = "Munabih"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            FirstName = "Sara",
                            IsDeveloper = false,
                            LastName = "Ahmed"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 4,
                            FirstName = "Rain",
                            IsDeveloper = false,
                            LastName = "Samara"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 3,
                            FirstName = "Moni",
                            IsDeveloper = true,
                            LastName = "Xaman"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 5,
                            FirstName = "Sophie",
                            IsDeveloper = false,
                            LastName = "Lee"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 2,
                            FirstName = "Julien",
                            IsDeveloper = false,
                            LastName = "Ahmed"
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 4,
                            FirstName = "Yoni",
                            IsDeveloper = false,
                            LastName = "Ashrov"
                        },
                        new
                        {
                            Id = 10,
                            DepartmentId = 1,
                            FirstName = "Scott",
                            IsDeveloper = true,
                            LastName = "Barron"
                        });
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.FileDTO", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            FileId = 1,
                            FileData = new byte[] { 72, 101, 108, 108, 111, 32, 67, 111, 109, 112, 108, 105, 97, 110, 99, 101, 32, 77, 97, 110, 32, 99, 111, 109, 112, 108, 105, 97, 110, 99, 101, 32, 102, 105, 108, 101 },
                            FileName = "File 1.docx",
                            PolicyId = 1
                        },
                        new
                        {
                            FileId = 2,
                            FileData = new byte[] { 72, 101, 108, 108, 111, 32, 67, 111, 109, 112, 108, 105, 97, 110, 99, 101, 32, 77, 97, 110, 32, 99, 111, 109, 112, 108, 105, 97, 110, 99, 101, 32, 102, 105, 108, 101 },
                            FileName = "File 2.docx",
                            PolicyId = 2
                        });
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.PolicyDTO", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolicyId");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            PolicyId = 1,
                            Description = "Policy Basic Description",
                            PolicyName = "Policy 1"
                        },
                        new
                        {
                            PolicyId = 2,
                            Description = "Policy Basic Description",
                            PolicyName = "Policy 2"
                        });
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.RoleDTO", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.RolePermissionDTO", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"), 1L, 1);

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.TeamDTO", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"), 1L, 1);

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            TeamName = "Team 1"
                        },
                        new
                        {
                            TeamId = 2,
                            TeamName = "Team 2"
                        });
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.UserDTO", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            UserCode = "U001",
                            UserName = "User 1"
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            UserCode = "U002",
                            UserName = "User 2"
                        });
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.UserPolicyDTO", b =>
                {
                    b.Property<int>("UserPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPolicyId"), 1L, 1);

                    b.Property<DateTime>("AcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPolicyId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPolicies");

                    b.HasData(
                        new
                        {
                            UserPolicyId = 1,
                            AcceptanceDate = new DateTime(2023, 7, 3, 17, 36, 5, 193, DateTimeKind.Local).AddTicks(1565),
                            PolicyId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserPolicyId = 2,
                            AcceptanceDate = new DateTime(2023, 7, 3, 17, 36, 5, 193, DateTimeKind.Local).AddTicks(1579),
                            PolicyId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PolicyTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("TeamId");

                    b.ToTable("PolicyTeam", (string)null);
                });

            modelBuilder.Entity("UserTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeam", (string)null);
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.Employee", b =>
                {
                    b.HasOne("ComplianceMan.Data.Entity.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.FileDTO", b =>
                {
                    b.HasOne("ComplianceMan.Data.Entity.PolicyDTO", "Policy")
                        .WithMany("Files")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.RolePermissionDTO", b =>
                {
                    b.HasOne("ComplianceMan.Data.Entity.RoleDTO", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.UserDTO", b =>
                {
                    b.HasOne("ComplianceMan.Data.Entity.RoleDTO", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.UserPolicyDTO", b =>
                {
                    b.HasOne("ComplianceMan.Data.Entity.PolicyDTO", "Policy")
                        .WithMany("UserPolicies")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplianceMan.Data.Entity.UserDTO", "User")
                        .WithMany("UserPolicies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PolicyTeam", b =>
                {
                    b.HasOne("ComplianceMan.Data.Entity.PolicyDTO", null)
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplianceMan.Data.Entity.TeamDTO", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserTeam", b =>
                {
                    b.HasOne("ComplianceMan.Data.Entity.TeamDTO", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplianceMan.Data.Entity.UserDTO", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.PolicyDTO", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("UserPolicies");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.RoleDTO", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ComplianceMan.Data.Entity.UserDTO", b =>
                {
                    b.Navigation("UserPolicies");
                });
#pragma warning restore 612, 618
        }
    }
}
